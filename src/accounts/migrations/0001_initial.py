# Generated by Django 4.2 on 2024-07-23 16:17

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_resized.forms
import phonenumber_field.modelfields
import src.accounts.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('state', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'District',
                'verbose_name_plural': 'Districts',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Treasury',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, validators=[src.accounts.models.phone_number_validator, src.accounts.models.numbers_only])),
                ('email', models.EmailField(blank=True, max_length=100, null=True)),
                ('s100', models.PositiveIntegerField(default=0)),
                ('s150', models.PositiveIntegerField(default=0)),
                ('s200', models.PositiveIntegerField(default=0)),
                ('s250', models.PositiveIntegerField(default=0)),
                ('s300', models.PositiveIntegerField(default=0)),
                ('s400', models.PositiveIntegerField(default=0)),
                ('s500', models.PositiveIntegerField(default=0)),
                ('s750', models.PositiveIntegerField(default=0)),
                ('s1000', models.PositiveIntegerField(default=0)),
                ('s2000', models.PositiveIntegerField(default=0)),
                ('s3000', models.PositiveIntegerField(default=0)),
                ('s5000', models.PositiveIntegerField(default=0)),
                ('s10000', models.PositiveIntegerField(default=0)),
                ('s25000', models.PositiveIntegerField(default=0)),
                ('s50000', models.PositiveIntegerField(default=0)),
                ('j25', models.PositiveIntegerField(default=0)),
                ('j30', models.PositiveIntegerField(default=0)),
                ('j35', models.PositiveIntegerField(default=0)),
                ('j50', models.PositiveIntegerField(default=0)),
                ('j60', models.PositiveIntegerField(default=0)),
                ('j75', models.PositiveIntegerField(default=0)),
                ('j100', models.PositiveIntegerField(default=0)),
                ('j125', models.PositiveIntegerField(default=0)),
                ('j150', models.PositiveIntegerField(default=0)),
                ('j200', models.PositiveIntegerField(default=0)),
                ('j500', models.PositiveIntegerField(default=0)),
                ('j1000', models.PositiveIntegerField(default=0)),
                ('j2000', models.PositiveIntegerField(default=0)),
                ('j3000', models.PositiveIntegerField(default=0)),
                ('j5000', models.PositiveIntegerField(default=0)),
                ('j10000', models.PositiveIntegerField(default=0)),
                ('j15000', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('city', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.city', verbose_name='District')),
            ],
            options={
                'verbose_name_plural': 'Treasuries',
                'ordering': ['city__name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=200, unique=True)),
                ('profile_image', django_resized.forms.ResizedImageField(blank=True, crop=['middle', 'center'], force_format='PNG', help_text='size of logo must be 250*250 and format must be png image file', keep_meta=True, null=True, quality=75, scale=None, size=[250, 250], upload_to='accounts/images/profiles/')),
                ('dob', models.DateField(null=True, validators=[src.accounts.models.validate_age], verbose_name='Date of Birth')),
                ('designation', models.CharField(max_length=200, null=True)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region='PK')),
                ('cnic', models.CharField(help_text='Enter cnic Number without - ', max_length=13, null=True, validators=[src.accounts.models.validate_cnic, src.accounts.models.numbers_only])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('treasury', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.treasury')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['-id'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
